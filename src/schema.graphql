# Type definitions (schema)
# grades will always have array, even when the result is empty([])

type Query {
  hello: String!
  name: String!
  location: String!
  bio: String!
  me: User!
  greeting(name: String): String!
  grades: [Int]!
  add(numbers: [Int!]!): Int!
  sampleposts: [PostSample]!
  users: [User]!
  posts: [Post]!
  comments(postId: ID!): [Comment]!
}

type PostSample {
  id: ID!
  title: String!
  author: Author!
}

type Author {
  id: ID
  name: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
}

type Post {
  id: ID!
  author: User!
  title: String!
  content: String!
  comments: [Comment]!
}

type Comment {
  content: String!
  author: User!
  post: Post!
}

input CreateUserInput {
  name: String!
  age: Int!
  email: String!
}

input CreatePostInput {
  title: String!
  content: String!
  authorId: ID!
}

input CreateCommentInput {
  content: String!
  postId: ID!
  authorId: ID!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  createPost(input: CreatePostInput!): Post!
  createComment(input: CreateCommentInput!): Comment!
  deleteUser(id: ID!): Boolean
}

type Subscription {
  count: Int!
  comments(postId: ID!): [Comment!]!
}